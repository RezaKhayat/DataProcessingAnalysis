#PBS -l nodes=4:ppn=4
#PBS -l walltime=400:00:00
#PBS -l cput=1600:00:00
#PBS -l mem=16gb

cd /gpfs/home/rkhayat/Wilson/HIV_gp120Trimer/11nov23bc
# source ~/Applications/EMAN2/eman2.cshrc

module load openmpi

set proc = 16
# set parameters for the stack
set stack = start
set bin = 4

# iterations is nubmer of times classes are divided by 2.  Therefore total classes = 2^iterations
set iterations=10

# set parameters for the align2d search
# these have the sampe definition as the variables in the Sparx manual
set tr = '"8 6 4 2 1"'
set ts = '"2 2 2 1 0.5"'
set rs = 1
set ir = 1
set ou = 17

# Do you want aggressive centering of particles (1=yes, 0=no)
set agg_cent = 1

rm -f recon_cent_RF_v1.1
ln -s $PBSREMOTEDIR recon_cent_RF_v1.1  
chmod 755 recon_cent_RF_v1.1   
cd recon_cent_RF_v1.1

# rsync -rltouv --partial amibox03.scripps.edu:/ami/data15/appion/11nov23b/stacks/stack1_CTF/start_untilt.hed .
# rsync -rltouv --partial amibox03.scripps.edu:/ami/data15/appion/11nov23b/stacks/stack1_CTF/start_untilt.img .
# 
# rsync -rltouv --partial amibox03.scripps.edu:/ami/data15/appion/11nov23b/stacks/stack1_CTF/start_tilt.hed .
# rsync -rltouv --partial amibox03.scripps.edu:/ami/data15/appion/11nov23b/stacks/stack1_CTF/start_tilt.img .

# rsync -rltouv --partial amibox03.scripps.edu:/ami/data15/appion/11nov23b/stacks/stack1_CTF/ctf_particles.sparx . 
# rsync -rltouv --partial amibox03.scripps.edu:/ami/data15/appion/11nov23b/stacks/stack1_CTF/ctf_particles.frealign . 
# awk '{print $1 " " $2 " " $3 " " $4 " " $5 " " $6 " 0 0"}' ctf_particles.sparx > ctf_particles_new.sparx

# rsync -rltouv --partial amibox03.scripps.edu:/ami/data15/appion/11nov23c/stacks/stack1_CTF/start_untilt.hed start_untilt2.hed
# rsync -rltouv --partial amibox03.scripps.edu:/ami/data15/appion/11nov23c/stacks/stack1_CTF/start_untilt.img start_untilt2.img

# rsync -rltouv --partial amibox03.scripps.edu:/ami/data15/appion/11nov23c/stacks/stack1_CTF/start_tilt.hed start_tilt2.hed
# rsync -rltouv --partial amibox03.scripps.edu:/ami/data15/appion/11nov23c/stacks/stack1_CTF/start_tilt.img start_tilt2.img

# rsync -rltouv --partial amibox03.scripps.edu:/ami/data15/appion/11nov23c/stacks/stack1_CTF/ctf_particles.sparx ctf_particles2.sparx
# rsync -rltouv --partial amibox03.scripps.edu:/ami/data15/appion/11nov23c/stacks/stack1_CTF/ctf_particles.frealign ctf_particles2.frealign
# awk '{print $1 " " $2 " " $3 " " $4 " " $5 " " $6 " 0 0"}' ctf_particles2.sparx > ctf_particles2_new.sparx


# prepare the stack for Sparx. Later comment: this centering screws everything up! Do not use it.
# proc2d start_Total.hed Full_Stack_bin.hed shrink={$bin}
# cenalignint Full_Stack_bin.hed mask=27

if ( $bin > 1 ) then
#  e2proc2d.py start_untilt.hed bdb:Full_Stack --process=normalize                    
#  e2proc2d.py start_tilt.hed bdb:Full_Stack --process=normalize                    
#  sxheader.py bdb:Full_Stack --import=ctf_particles_new.sparx --params=ctf
#  sxprocess.py bdb:Full_Stack bdb:ctfFull_Stack --phase_flip
  e2proc2d.py bdb:ctfFull_Stack bdb:{$stack} --meanshrink={$bin}
  e2proc2d.py start_untilt2.hed bdb:Full_Stack2 --process=normalize
  e2proc2d.py start_tilt2.hed bdb:Full_Stack2 --process=normalize
  sxheader.py bdb:Full_Stack2 --import=ctf_particles2_new.sparx --params=ctf
  sxprocess.py bdb:Full_Stack2 bdb:ctfFull_Stack2 --phase_flip
  e2proc2d.py bdb:ctfFull_Stack2 bdb:{$stack} --meanshrink={$bin}
else
  sxcpy.py Full_Stack.hed bdb:{$stack} 
endif

# set the parameters in the header to zero value
sxheader.py bdb:{$stack} --zero --params=xform.align2d

# activate the particles
sxheader.py bdb:{$stack} --one --params=active

# Aggressive centering for reference free alignment
if ($agg_cent > 0) then
  e2bdb.py --delete bdb:{$stack}_cent
  set box_dim = `e2iminfo.py bdb:{$stack}  | grep x | awk '{print $7}'`
  set ou_a = `echo $ou | awk '{print $1/4}'`
  e2proc2d.py bdb:{$stack} bdb:{$stack}_cent --meanshrink=4 --clip={$box_dim},{$box_dim}
  sxheader.py bdb:{$stack}_cent --zero --params=xform.align2d
  sxheader.py bdb:{$stack}_cent --one --params=active
  mpirun -np $proc sxali2d.py bdb:{$stack}_cent out_bin{$bin}_sxali2d --ir={$ir} --ou={$ou_a} --rs={$rs} --xr="24 20 16 12 8 4" --yr="24 20 16 12 8 4" --ts="6 5 4 3 2 1" --MPI
  sxheader.py bdb:{$stack}_cent --print --params=xform.align2d > out_bin{$bin}_sxali2d/fparamz.txt
  awk '{print $1 " " $2*4 " " $3*4 " " $4 " " $5}' out_bin{$bin}_sxali2d/fparamz.txt > fparamz_cent.txt
  sxheader.py bdb:{$stack} --import=fparamz_cent.txt --params=xform.align2d
else
  mpirun -np $proc sxali2d.py bdb:{$stack} out_bin{$bin}_sxali2d --ir={$ir} --ou={$ou} --rs={$rs} --xr="32 16 8 4 2" --yr="32 16 8 4 2" --ts="8 4 2 1 0.5" --maxit=20 --MPI
  sxheader.py bdb:{$stack} --print --params=xform.align2d > out_bin{$bin}_sxali2d/fparamz.txt
endif


sxtransform2d.py bdb:{$stack} start_ali2d.hdf

set particles = `e2iminfo.py bdb:{$stack} | grep "total images" | awk '{print $1}'`
set iterations = `echo $particles | awk '{print $1 * 15}'`
set box_dim = `e2iminfo.py bdb:{$stack}  | grep x | awk '{print $7}'`
set xr = `echo $box_dim | awk '{print int($1/8)}' | awk '{if ($1 % 2 == 0) print $1; else print $1+1}'`
set i = 1
set p_round = 1

while ($i <= $iterations)
  set round = `echo $p_round | awk '{print 2*$1}'`
  proc2d start_ali2d.hdf start_ali2d.hed norm
  mkdir out_bin{$bin}_CAN_{$round}/
  /gpfs/home/rkhayat/Applications/Adapt2_01/CAN start_ali2d out_bin{$bin}_CAN_{$round}/averages $iterations 0.1 0.001 20 {$round}
  proc2d out_bin{$bin}_CAN_{$round}/averages_avg.hed out_bin{$bin}_CAN_{$round}/averages_avg.hdf
  mpirun -np $proc sxmref_ali2d.py bdb:{$stack} out_bin{$bin}_CAN_{$round}/averages_avg.hdf out_bin{$bin}_sxmref_{$round} --ir={$ir} --ou={$ou} --rs={$rs} --xr={$xr} --yr={$xr} --ts=1 --center=0 --maxit=10  --MPI
  sxheader.py bdb:{$stack} --print --params=xform.align2d > out_bin{$bin}_sxmref_{$round}/fparamz.txt
  rm -rf start_ali2d.*  
  sxtransform2d.py bdb:{$stack} start_ali2d.hdf
  set p_round = `echo $round | awk '{print $1}'`
  set i = `expr $i + 1`
end

